/**
* Inexor Entity System
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 3.0.0
* Contact: info@inexor.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "EntitySystemApi.h"
#include "../model/Helpers.h"

namespace inexor {
namespace entity_system {
namespace server {
namespace api {

using namespace inexor::entity_system::server::helpers;
using namespace inexor::entity_system::server::model;

EntitySystemApi::EntitySystemApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void EntitySystemApi::init() {
    setupRoutes();
}

void EntitySystemApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Delete(*router, base + "/entitysystem", Routes::bind(&EntitySystemApi::clearntity_system_handler, this));
    Routes::Get(*router, base + "/entitysystem", Routes::bind(&EntitySystemApi::export_entity_system_handler, this));
    Routes::Post(*router, base + "/entitysystem", Routes::bind(&EntitySystemApi::import_entity_system_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&EntitySystemApi::entity_system_api_default_handler, this));
}

void EntitySystemApi::clearntity_system_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->clearntity_system(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntitySystemApi::export_entity_system_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->export_entity_system(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntitySystemApi::import_entity_system_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->import_entity_system(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void EntitySystemApi::entity_system_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

