/**
* Inexor Entity System
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 3.0.0
* Contact: info@inexor.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * RelationshipInstanceApi.h
 *
 * 
 */

#ifndef RelationshipInstanceApi_H_
#define RelationshipInstanceApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "../model/EntitySystemMessage.h"
#include "../model/RelationshipInstance.h"
#include <string>

namespace inexor {
namespace entity_system {
namespace server {
namespace api {

using namespace inexor::entity_system::server::model;

class  RelationshipInstanceApi {
public:
    RelationshipInstanceApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~RelationshipInstanceApi() {}
    void init();

    const std::string base = "/api/v1";

private:
    void setupRoutes();

    void create_or_update_relationship_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_relationship_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_all_relationship_instances_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_relationship_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_relationship_instances_between_start_and_end_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_all_relationship_instances_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_all_relationship_instances_by_relationship_type_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_all_relationship_instances_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_incoming_relationship_instances_by_relationship_type_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_incoming_relationship_instances_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_outgoing_relationship_instances_by_relationship_type_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_outgoing_relationship_instances_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_relationship_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_relationship_instances_between_start_and_end_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void relationship_instance_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Creates (or updates if already exists) a relationship instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="relationshipInstanceUuid">The UUID of the relationship instance</param>
    /// <param name="relationshipInstance">The relationship instance as object</param>
    virtual void create_or_update_relationship_instance(const std::string &relationshipInstanceUuid, const RelationshipInstance &relationshipInstance, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Creates a relationship instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="relationshipInstance">The relationship instance as object</param>
    virtual void create_relationship_instance(const RelationshipInstance &relationshipInstance, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Deletes all relationship instances
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void delete_all_relationship_instances(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Deletes the relationship instance with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="relationshipInstanceUuid">The UUID of the relationship instance</param>
    virtual void delete_relationship_instance(const std::string &relationshipInstanceUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Deletes all relationships instances between a start entity instance and an end entity instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="startEntityInstanceUuid">The UUID of the start entity instance</param>
    /// <param name="endEntityInstanceUuid">The UUID of the end entity instance</param>
    virtual void delete_relationship_instances_between_start_and_end(const std::string &startEntityInstanceUuid, const std::string &endEntityInstanceUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all relationship instances
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void get_all_relationship_instances(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all incoming and outgoing relationship instances of a certain relationship type
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityInstanceUuid">The UUID of the entity instance</param>
    /// <param name="relationshipTypeUuid">The UUID of the relationship type</param>
    virtual void get_all_relationship_instances_by_relationship_type_of_entity_instance(const std::string &entityInstanceUuid, const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all incoming and outgoing relationship instances of the entity instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityInstanceUuid">The UUID of the entity instance</param>
    virtual void get_all_relationship_instances_of_entity_instance(const std::string &entityInstanceUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all incoming and outgoing relationship instances of a certain relationship type
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityInstanceUuid">The UUID of the entity instance</param>
    /// <param name="relationshipTypeUuid">The UUID of the relationship type</param>
    virtual void get_incoming_relationship_instances_by_relationship_type_of_entity_instance(const std::string &entityInstanceUuid, const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all incoming relationship instances of the entity instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityInstanceUuid">The UUID of the entity instance</param>
    virtual void get_incoming_relationship_instances_of_entity_instance(const std::string &entityInstanceUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all incoming and outgoing relationship instances of a certain relationship type
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityInstanceUuid">The UUID of the entity instance</param>
    /// <param name="relationshipTypeUuid">The UUID of the relationship type</param>
    virtual void get_outgoing_relationship_instances_by_relationship_type_of_entity_instance(const std::string &entityInstanceUuid, const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all outgoing relationship instances of the entity instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityInstanceUuid">The UUID of the entity instance</param>
    virtual void get_outgoing_relationship_instances_of_entity_instance(const std::string &entityInstanceUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns the relationship instance with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="relationshipInstanceUuid">The UUID of the relationship instance</param>
    virtual void get_relationship_instance(const std::string &relationshipInstanceUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all relationships instances between a start entity instance and an end entity instance
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="startEntityInstanceUuid">The UUID of the start entity instance</param>
    /// <param name="endEntityInstanceUuid">The UUID of the end entity instance</param>
    virtual void get_relationship_instances_between_start_and_end(const std::string &startEntityInstanceUuid, const std::string &endEntityInstanceUuid, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* RelationshipInstanceApi_H_ */

