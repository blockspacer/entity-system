/**
 * Inexor Entity System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@inexor.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EntityTypeApi.h
 *
 * 
 */

#ifndef EntityTypeApi_H_
#define EntityTypeApi_H_


#include <memory>
#include <string>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/service.hpp>

#include "../model/Attribute.h"
#include "../model/EntityInstance.h"
#include "../model/EntitySystemMessage.h"
#include "../model/EntityType.h"
#include "../model/RelationshipType.h"

namespace inexor {
namespace entity_system {
namespace rest {
namespace api {

using namespace inexor::entity_system::rest::model;

class  EntityTypeApi: public restbed::Service
{
public:
	EntityTypeApi();
	~EntityTypeApi();
	void startService(int const& port);
	void stopService();
};


/// <summary>
/// Creates an entity type
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesResource: public restbed::Resource
{
public:
	EntityTypeApiEntitiesTypesResource();
    virtual ~EntityTypeApiEntitiesTypesResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates (or updates if already exists) the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidResource: public restbed::Resource
{
public:
	EntityTypeApiEntitiesTypesEntity_type_uuidResource();
    virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Creates (or updates if already exists) the value of the named attribute of the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource: public restbed::Resource
{
public:
	EntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource();
    virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidAttributesNameResource();
    void POST_method_handler(const std::shared_ptr<restbed::Session> session);
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Deletes all entity instances of the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource: public restbed::Resource
{
public:
	EntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource();
    virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidInstancesResource();
    void DELETE_method_handler(const std::shared_ptr<restbed::Session> session);
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Returns all incoming relationship types of the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource: public restbed::Resource
{
public:
	EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource();
    virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsIncomingResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Returns all outgoing relationship types of the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource: public restbed::Resource
{
public:
	EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource();
    virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsOutgoingResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Returns all incoming and outgoing relationship types of the entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource: public restbed::Resource
{
public:
	EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource();
    virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidRelationshipsResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// Returns all attributes of the given entity type with the given UUID
/// </summary>
/// <remarks>
/// 
/// </remarks>
class  EntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource: public restbed::Resource
{
public:
	EntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource();
    virtual ~EntityTypeApiEntitiesTypesEntity_type_uuidAttributesResource();
    void GET_method_handler(const std::shared_ptr<restbed::Session> session);
};


}
}
}
}

#endif /* EntityTypeApi_H_ */

