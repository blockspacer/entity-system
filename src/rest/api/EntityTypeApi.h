/**
* Inexor Entity System
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 3.0.0
* Contact: info@inexor.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * EntityTypeApi.h
 *
 * 
 */

#ifndef EntityTypeApi_H_
#define EntityTypeApi_H_


#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>


#include "../model/Attribute.h"
#include "../model/EntityInstance.h"
#include "../model/EntitySystemMessage.h"
#include "../model/EntityType.h"
#include "../model/RelationshipType.h"
#include <string>

namespace inexor {
namespace entity_system {
namespace server {
namespace api {

using namespace inexor::entity_system::server::model;

class  EntityTypeApi {
public:
    EntityTypeApi(std::shared_ptr<Pistache::Rest::Router>);
    virtual ~EntityTypeApi() {}
    void init();

    const std::string base = "/api/v1";

private:
    void setupRoutes();

    void create_entity_type_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_or_update_entity_type_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void create_or_update_entity_type_attribute_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_all_instances_of_entity_type_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_entity_type_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_entity_type_attribute_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void delete_entity_types_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_all_incoming_relationship_types_of_entity_type_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_all_instances_of_entity_type_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_all_outgoing_relationship_types_of_entity_type_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_all_relationship_types_of_entity_type_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_entity_type_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_entity_type_attribute_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_entity_type_attributes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void list_all_entity_types_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void entity_type_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Rest::Router> router;

    /// <summary>
    /// Creates an entity type
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void create_entity_type(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Creates (or updates if already exists) the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    /// <param name="entityType">The entity type as object</param>
    virtual void create_or_update_entity_type(const std::string &entityTypeUuid, const EntityType &entityType, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Creates (or updates if already exists) the value of the named attribute of the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    /// <param name="name">The name of the attribute</param>
    /// <param name="body">The entity type as object</param>
    virtual void create_or_update_entity_type_attribute(const std::string &entityTypeUuid, const std::string &name, const std::string &body, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Deletes all entity instances of the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    virtual void delete_all_instances_of_entity_type(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Deletes the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    virtual void delete_entity_type(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Deletes the named attribute of the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    /// <param name="name">The name of the attribute</param>
    virtual void delete_entity_type_attribute(const std::string &entityTypeUuid, const std::string &name, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Deletes all entity types (and all entity instances)
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void delete_entity_types(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all incoming relationship types of the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    virtual void get_all_incoming_relationship_types_of_entity_type(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all entity instances of the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    virtual void get_all_instances_of_entity_type(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all outgoing relationship types of the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    virtual void get_all_outgoing_relationship_types_of_entity_type(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all incoming and outgoing relationship types of the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    virtual void get_all_relationship_types_of_entity_type(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    virtual void get_entity_type(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns the value of the named attribute of the entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    /// <param name="name">The name of the attribute</param>
    virtual void get_entity_type_attribute(const std::string &entityTypeUuid, const std::string &name, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Returns all attributes of the given entity type with the given UUID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="entityTypeUuid">The UUID of the entity type to retrieve</param>
    virtual void get_entity_type_attributes(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// Lists all entity types
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    virtual void list_all_entity_types(Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* EntityTypeApi_H_ */

