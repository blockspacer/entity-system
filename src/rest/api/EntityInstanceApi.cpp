/**
* Inexor Entity System
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 3.0.0
* Contact: info@inexor.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "EntityInstanceApi.h"
#include "../model/Helpers.h"

namespace inexor {
namespace entity_system {
namespace server {
namespace api {

using namespace inexor::entity_system::server::helpers;
using namespace inexor::entity_system::server::model;

EntityInstanceApi::EntityInstanceApi(std::shared_ptr<Pistache::Rest::Router> rtr) { 
    router = rtr;
};

void EntityInstanceApi::init() {
    setupRoutes();
}

void EntityInstanceApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Post(*router, base + "/entities/instances", Routes::bind(&EntityInstanceApi::create_entity_instance_handler, this));
    Routes::Post(*router, base + "/entities/instances/:entity_instance_uuid", Routes::bind(&EntityInstanceApi::create_or_update_entity_instance_handler, this));
    Routes::Post(*router, base + "/entities/instances/:entity_instance_uuid/attributes/:name", Routes::bind(&EntityInstanceApi::create_or_update_entity_instance_attribute_handler, this));
    Routes::Delete(*router, base + "/entities/instances", Routes::bind(&EntityInstanceApi::delete_all_entity_instances_handler, this));
    Routes::Delete(*router, base + "/entities/instances/:entity_instance_uuid", Routes::bind(&EntityInstanceApi::delete_entity_instance_handler, this));
    Routes::Delete(*router, base + "/entities/instances/:entity_instance_uuid/attributes/:name", Routes::bind(&EntityInstanceApi::delete_entity_instance_attribute_handler, this));
    Routes::Delete(*router, base + "/relationships/instances/start/:start_entity_instance_uuid/end/:end_entity_instance_uuid", Routes::bind(&EntityInstanceApi::delete_relationship_instances_between_start_and_end_handler, this));
    Routes::Get(*router, base + "/entities/instances", Routes::bind(&EntityInstanceApi::get_all_entity_instances_handler, this));
    Routes::Get(*router, base + "/entities/instances/:entity_instance_uuid/relationships/:relationship_type_uuid", Routes::bind(&EntityInstanceApi::get_all_relationship_instances_by_relationship_type_of_entity_instance_handler, this));
    Routes::Get(*router, base + "/entities/instances/:entity_instance_uuid/relationships", Routes::bind(&EntityInstanceApi::get_all_relationship_instances_of_entity_instance_handler, this));
    Routes::Get(*router, base + "/entities/instances/:entity_instance_uuid", Routes::bind(&EntityInstanceApi::get_entity_instance_handler, this));
    Routes::Get(*router, base + "/entities/instances/:entity_instance_uuid/attributes/:name", Routes::bind(&EntityInstanceApi::get_entity_instance_attribute_handler, this));
    Routes::Get(*router, base + "/entities/instances/:entity_instance_uuid/attributes", Routes::bind(&EntityInstanceApi::get_entity_instance_attributes_handler, this));
    Routes::Get(*router, base + "/entities/instances/:entity_instance_uuid/relationships/:relationship_type_uuid/incoming", Routes::bind(&EntityInstanceApi::get_incoming_relationship_instances_by_relationship_type_of_entity_instance_handler, this));
    Routes::Get(*router, base + "/entities/instances/:entity_instance_uuid/relationships/incoming", Routes::bind(&EntityInstanceApi::get_incoming_relationship_instances_of_entity_instance_handler, this));
    Routes::Get(*router, base + "/entities/instances/:entity_instance_uuid/relationships/:relationship_type_uuid/outgoing", Routes::bind(&EntityInstanceApi::get_outgoing_relationship_instances_by_relationship_type_of_entity_instance_handler, this));
    Routes::Get(*router, base + "/entities/instances/:entity_instance_uuid/relationships/outgoing", Routes::bind(&EntityInstanceApi::get_outgoing_relationship_instances_of_entity_instance_handler, this));
    Routes::Get(*router, base + "/relationships/instances/start/:start_entity_instance_uuid/end/:end_entity_instance_uuid", Routes::bind(&EntityInstanceApi::get_relationship_instances_between_start_and_end_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&EntityInstanceApi::entity_instance_api_default_handler, this));
}

void EntityInstanceApi::create_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    // Getting the body param
    
    EntityInstance entityInstance;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      entityInstance.fromJson(request_body);
    
      this->create_entity_instance(entityInstance, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::create_or_update_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    
    // Getting the body param
    
    EntityInstance entityInstance;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      entityInstance.fromJson(request_body);
    
      this->create_or_update_entity_instance(entityInstanceUuid, entityInstance, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::create_or_update_entity_instance_attribute_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    auto name = request.param(":name").as<std::string>();
    
    // Getting the body param
    
    Attribute attribute;
    
    try {
      nlohmann::json request_body = nlohmann::json::parse(request.body());
    
      attribute.fromJson(request_body);
    
      this->create_or_update_entity_instance_attribute(entityInstanceUuid, name, attribute, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::delete_all_entity_instances_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->delete_all_entity_instances(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::delete_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    
    try {
      this->delete_entity_instance(entityInstanceUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::delete_entity_instance_attribute_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    auto name = request.param(":name").as<std::string>();
    
    try {
      this->delete_entity_instance_attribute(entityInstanceUuid, name, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::delete_relationship_instances_between_start_and_end_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto startEntityInstanceUuid = request.param(":startEntityInstanceUuid").as<std::string>();
    auto endEntityInstanceUuid = request.param(":endEntityInstanceUuid").as<std::string>();
    
    try {
      this->delete_relationship_instances_between_start_and_end(startEntityInstanceUuid, endEntityInstanceUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_all_entity_instances_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {

    try {
      this->get_all_entity_instances(response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_all_relationship_instances_by_relationship_type_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    auto relationshipTypeUuid = request.param(":relationshipTypeUuid").as<std::string>();
    
    try {
      this->get_all_relationship_instances_by_relationship_type_of_entity_instance(entityInstanceUuid, relationshipTypeUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_all_relationship_instances_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    
    try {
      this->get_all_relationship_instances_of_entity_instance(entityInstanceUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    
    try {
      this->get_entity_instance(entityInstanceUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_entity_instance_attribute_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    auto name = request.param(":name").as<std::string>();
    
    try {
      this->get_entity_instance_attribute(entityInstanceUuid, name, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_entity_instance_attributes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    
    try {
      this->get_entity_instance_attributes(entityInstanceUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_incoming_relationship_instances_by_relationship_type_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    auto relationshipTypeUuid = request.param(":relationshipTypeUuid").as<std::string>();
    
    try {
      this->get_incoming_relationship_instances_by_relationship_type_of_entity_instance(entityInstanceUuid, relationshipTypeUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_incoming_relationship_instances_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    
    try {
      this->get_incoming_relationship_instances_of_entity_instance(entityInstanceUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_outgoing_relationship_instances_by_relationship_type_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    auto relationshipTypeUuid = request.param(":relationshipTypeUuid").as<std::string>();
    
    try {
      this->get_outgoing_relationship_instances_by_relationship_type_of_entity_instance(entityInstanceUuid, relationshipTypeUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_outgoing_relationship_instances_of_entity_instance_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto entityInstanceUuid = request.param(":entityInstanceUuid").as<std::string>();
    
    try {
      this->get_outgoing_relationship_instances_of_entity_instance(entityInstanceUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}
void EntityInstanceApi::get_relationship_instances_between_start_and_end_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    // Getting the path params
    auto startEntityInstanceUuid = request.param(":startEntityInstanceUuid").as<std::string>();
    auto endEntityInstanceUuid = request.param(":endEntityInstanceUuid").as<std::string>();
    
    try {
      this->get_relationship_instances_between_start_and_end(startEntityInstanceUuid, endEntityInstanceUuid, response);
    } catch (std::runtime_error & e) {
      //send a 400 error
      response.send(Pistache::Http::Code::Bad_Request, e.what());
      return;
    }

}

void EntityInstanceApi::entity_instance_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}
}
}
}

