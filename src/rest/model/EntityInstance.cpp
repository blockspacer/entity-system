/**
* Inexor Entity System
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 3.0.0
* Contact: info@inexor.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "EntityInstance.h"

namespace inexor {
namespace entity_system {
namespace server {
namespace model {

EntityInstance::EntityInstance()
{
    m_Entity_instance_uuid = "";
    m_Entity_type_uuid = "";
    
}

EntityInstance::~EntityInstance()
{
}

void EntityInstance::validate()
{
    // TODO: implement validation
}

nlohmann::json EntityInstance::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    val["entity_instance_uuid"] = ModelBase::toJson(m_Entity_instance_uuid);
    val["entity_type_uuid"] = ModelBase::toJson(m_Entity_type_uuid);
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Attributes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["attributes"] = jsonArray;
        
    }
    

    return val;
}

void EntityInstance::fromJson(const nlohmann::json& val)
{
    setEntityInstanceUuid(val.at("entity_instance_uuid"));
    setEntityTypeUuid(val.at("entity_type_uuid"));
    {
        m_Attributes.clear();
                    for( auto& item : val["attributes"] )
            {
                
                if(item.is_null())
                {
                    m_Attributes.push_back( Attribute() );
                }
                else
                {
                    Attribute newItem;
                    newItem.fromJson(item);
                    m_Attributes.push_back( newItem );
                }
                
            }
    }
    
}


std::string EntityInstance::getEntityInstanceUuid() const
{
    return m_Entity_instance_uuid;
}
void EntityInstance::setEntityInstanceUuid(std::string const& value)
{
    m_Entity_instance_uuid = value;
    
}
std::string EntityInstance::getEntityTypeUuid() const
{
    return m_Entity_type_uuid;
}
void EntityInstance::setEntityTypeUuid(std::string const& value)
{
    m_Entity_type_uuid = value;
    
}
std::vector<Attribute>& EntityInstance::getAttributes()
{
    return m_Attributes;
}

}
}
}
}

