/**
* Inexor Entity System
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 3.0.0
* Contact: info@inexor.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "EntitySystem.h"

namespace inexor {
namespace entity_system {
namespace server {
namespace model {

EntitySystem::EntitySystem()
{
    
}

EntitySystem::~EntitySystem()
{
}

void EntitySystem::validate()
{
    // TODO: implement validation
}

nlohmann::json EntitySystem::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    {
        nlohmann::json jsonArray;
        for( auto& item : m_Entity_types )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["entity_types"] = jsonArray;
        
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Relationship_types )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["relationship_types"] = jsonArray;
        
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Entity_instances )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["entity_instances"] = jsonArray;
        
    }
    {
        nlohmann::json jsonArray;
        for( auto& item : m_Relationship_instances )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        val["relationship_instances"] = jsonArray;
        
    }
    

    return val;
}

void EntitySystem::fromJson(const nlohmann::json& val)
{
    {
        m_Entity_types.clear();
                    for( auto& item : val["entity_types"] )
            {
                
                if(item.is_null())
                {
                    m_Entity_types.push_back( EntityType() );
                }
                else
                {
                    EntityType newItem;
                    newItem.fromJson(item);
                    m_Entity_types.push_back( newItem );
                }
                
            }
    }
    {
        m_Relationship_types.clear();
                    for( auto& item : val["relationship_types"] )
            {
                
                if(item.is_null())
                {
                    m_Relationship_types.push_back( RelationshipType() );
                }
                else
                {
                    RelationshipType newItem;
                    newItem.fromJson(item);
                    m_Relationship_types.push_back( newItem );
                }
                
            }
    }
    {
        m_Entity_instances.clear();
                    for( auto& item : val["entity_instances"] )
            {
                
                if(item.is_null())
                {
                    m_Entity_instances.push_back( EntityInstance() );
                }
                else
                {
                    EntityInstance newItem;
                    newItem.fromJson(item);
                    m_Entity_instances.push_back( newItem );
                }
                
            }
    }
    {
        m_Relationship_instances.clear();
                    for( auto& item : val["relationship_instances"] )
            {
                
                if(item.is_null())
                {
                    m_Relationship_instances.push_back( RelationshipInstance() );
                }
                else
                {
                    RelationshipInstance newItem;
                    newItem.fromJson(item);
                    m_Relationship_instances.push_back( newItem );
                }
                
            }
    }
    
}


std::vector<EntityType>& EntitySystem::getEntityTypes()
{
    return m_Entity_types;
}
std::vector<RelationshipType>& EntitySystem::getRelationshipTypes()
{
    return m_Relationship_types;
}
std::vector<EntityInstance>& EntitySystem::getEntityInstances()
{
    return m_Entity_instances;
}
std::vector<RelationshipInstance>& EntitySystem::getRelationshipInstances()
{
    return m_Relationship_instances;
}

}
}
}
}

