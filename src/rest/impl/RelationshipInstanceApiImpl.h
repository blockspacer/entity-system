/**
* Inexor Entity System
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 3.0.0
* Contact: info@inexor.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

/*
* RelationshipInstanceApiImpl.h
*
* 
*/

#ifndef RELATIONSHIP_INSTANCE_API_IMPL_H_
#define RELATIONSHIP_INSTANCE_API_IMPL_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/optional.h>
#include <memory>
#include <string>

#include "../api/RelationshipInstanceApi.h"
#include "../model/EntitySystemMessage.h"
#include "../model/RelationshipInstance.h"

namespace inexor {
namespace entity_system {
namespace server {
namespace api {

using namespace inexor::entity_system::server::model;

class RelationshipInstanceApiImpl : public inexor::entity_system::server::api::RelationshipInstanceApi {
public:
    RelationshipInstanceApiImpl(std::shared_ptr<Pistache::Rest::Router>);
    ~RelationshipInstanceApiImpl() {}

    void create_or_update_relationship_instance(const std::string &relationshipInstanceUuid, const RelationshipInstance &relationshipInstance, Pistache::Http::ResponseWriter &response);
    void create_relationship_instance(const RelationshipInstance &relationshipInstance, Pistache::Http::ResponseWriter &response);
    void delete_all_relationship_instances(Pistache::Http::ResponseWriter &response);
    void delete_relationship_instance(const std::string &relationshipInstanceUuid, Pistache::Http::ResponseWriter &response);
    void delete_relationship_instances_between_start_and_end(const std::string &startEntityInstanceUuid, const std::string &endEntityInstanceUuid, Pistache::Http::ResponseWriter &response);
    void get_all_relationship_instances(Pistache::Http::ResponseWriter &response);
    void get_all_relationship_instances_by_relationship_type_of_entity_instance(const std::string &entityInstanceUuid, const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response);
    void get_all_relationship_instances_of_entity_instance(const std::string &entityInstanceUuid, Pistache::Http::ResponseWriter &response);
    void get_incoming_relationship_instances_by_relationship_type_of_entity_instance(const std::string &entityInstanceUuid, const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response);
    void get_incoming_relationship_instances_of_entity_instance(const std::string &entityInstanceUuid, Pistache::Http::ResponseWriter &response);
    void get_outgoing_relationship_instances_by_relationship_type_of_entity_instance(const std::string &entityInstanceUuid, const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response);
    void get_outgoing_relationship_instances_of_entity_instance(const std::string &entityInstanceUuid, Pistache::Http::ResponseWriter &response);
    void get_relationship_instance(const std::string &relationshipInstanceUuid, Pistache::Http::ResponseWriter &response);
    void get_relationship_instances_between_start_and_end(const std::string &startEntityInstanceUuid, const std::string &endEntityInstanceUuid, Pistache::Http::ResponseWriter &response);

};

}
}
}
}



#endif
