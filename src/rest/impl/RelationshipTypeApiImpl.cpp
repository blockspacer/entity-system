/**
* Inexor Entity System
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* OpenAPI spec version: 3.0.0
* Contact: info@inexor.org
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "RelationshipTypeApiImpl.h"

namespace inexor {
namespace entity_system {
namespace server {
namespace api {

using namespace inexor::entity_system::server::model;

RelationshipTypeApiImpl::RelationshipTypeApiImpl(std::shared_ptr<Pistache::Rest::Router> rtr)
    : RelationshipTypeApi(rtr)
    { }

void RelationshipTypeApiImpl::create_or_update_relationship_type(const std::string &relationshipTypeUuid, const RelationshipType &relationshipType, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::create_relationship_type(const RelationshipType &relationshipType, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::delete_all_relationship_types(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::delete_relationship_type(const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::get_all_incoming_relationship_types_of_entity_type(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::get_all_outgoing_relationship_types_of_entity_type(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::get_all_relationship_instances_by_relationship_type_of_entity_instance(const std::string &entityInstanceUuid, const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::get_all_relationship_types(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::get_all_relationship_types_of_entity_type(const std::string &entityTypeUuid, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::get_incoming_relationship_instances_by_relationship_type_of_entity_instance(const std::string &entityInstanceUuid, const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::get_outgoing_relationship_instances_by_relationship_type_of_entity_instance(const std::string &entityInstanceUuid, const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void RelationshipTypeApiImpl::get_relationship_type(const std::string &relationshipTypeUuid, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

