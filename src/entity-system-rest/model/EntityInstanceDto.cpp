/**
 * Inexor Entity System
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 3.0.0
 * Contact: info@inexor.org
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.0.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EntityInstanceDto.hpp"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

#include "spdlog/spdlog.h"

#include "entity-system/model/data/DataTypes.hpp"
#include "entity-system/model/data/container/DataContainer.hpp"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace inexor {
namespace entity_system {
namespace rest {
namespace model {

	EntityInstanceDto::EntityInstanceDto()
	{
		entity_instance_uuid = "";
		entity_type_uuid = "";
	}

	EntityInstanceDto::~EntityInstanceDto()
	{
	}

	std::string EntityInstanceDto::to_json_string()
	{
		std::stringstream ss;
		ptree pt;
		pt.put("entity_instance_uuid", entity_instance_uuid);
		pt.put("entity_type_uuid", entity_type_uuid);
		ptree pt_attributes;
		for (auto attribute : attributes)
		{
			ptree pt_attribute;
			pt_attribute.put("attribute_uuid", attribute->get_attribute_uuid());
			pt_attribute.put("name", attribute->get_name());
			pt_attribute.put("datatype", attribute->type._to_string());
			switch (attribute->type)
			{
				case DataType::BOOL:
					pt_attribute.put("value", std::get<DataType::BOOL>(attribute->value));
					break;
				case DataType::INT:
					pt_attribute.put("value", std::get<DataType::INT>(attribute->value));
					break;
				case DataType::BIG_INT:
					pt_attribute.put("value", std::get<DataType::BIG_INT>(attribute->value));
					break;
				case DataType::DOUBLE:
					pt_attribute.put("value", std::get<DataType::DOUBLE>(attribute->value));
					break;
				case DataType::FLOAT:
					pt_attribute.put("value", std::get<DataType::FLOAT>(attribute->value));
					break;
				case DataType::STRING:
					pt_attribute.put("value", std::get<DataType::STRING>(attribute->value));
					break;
//				case DataType::VEC3:
//					pt_attribute.put("value", std::get<DataType::VEC3>(attribute->value));
//					break;
//				case DataType::VEC4:
//					pt_attribute.put("value", std::get<DataType::VEC4>(attribute->value));
//					break;
				default:
					pt_attribute.put("value", "");
					break;
			}

			pt_attributes.push_back(std::make_pair("", pt_attribute));
		}
		pt.add_child("attributes", pt_attributes);
		write_json(ss, pt, false);
		return ss.str();
	}

	void EntityInstanceDto::from_json_string(std::string const& jsonString)
	{
		std::stringstream ss(jsonString);
		ptree pt;
		read_json(ss,pt);
		entity_instance_uuid = pt.get("entity_instance_uuid", "");
		entity_type_uuid = pt.get("entity_type_uuid", "");
	}

	std::string EntityInstanceDto::get_entity_instance_uuid() const
	{
		return entity_instance_uuid;
	}
	void EntityInstanceDto::set_entity_instance_uuid(std::string entity_instance_uuid)
	{
		this->entity_instance_uuid = entity_instance_uuid;
	}
	std::string EntityInstanceDto::get_entity_type_uuid() const
	{
		return entity_type_uuid;
	}
	void EntityInstanceDto::set_entity_type_uuid(std::string entity_type_uuid)
	{
		this->entity_type_uuid = entity_type_uuid;
	}
	std::vector<std::shared_ptr<AttributeDto>> EntityInstanceDto::get_attributes() const
	{
		return attributes;
	}
	void EntityInstanceDto::set_attributes(std::vector<std::shared_ptr<AttributeDto>> attributes)
	{
		this->attributes = attributes;
	}

}
}
}
}

